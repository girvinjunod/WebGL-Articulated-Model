let load = (file, callback) => {
  if (file.type && file.type.indexOf("json") === -1) {
    console.log("File is not an JSON.", file.type, file);
    return;
  }
  let reader = new FileReader();
  reader.addEventListener("load", (event) => {
    let data = JSON.parse(
      atob(
        event.target.result
          .toString()
          .match(/(?<=base64,).*/)
          .toString()
      )
    );
    callback(data);
  });
  reader.readAsDataURL(file);
};

let TempObj = () => {
  let wolf = {
    num_pts: 88,
    pts: [
      [-1.500001, 0, 16.425409],
      [1.499999, 0, 16.425409],
      [-1.500001, 0, 12.42541],
      [1.499999, 0, 12.42541],
      [-1.500001, 3, 16.425409],
      [1.499999, 3, 16.425409],
      [-1.500001, 3, 12.42541],
      [1.499999, 3, 12.42541],
      [0.999999, -7.954903, 10.42541],
      [3, -7.954903, 10.42541],
      [0.999999, -7.954903, 8.42541],
      [3, -7.954903, 8.42541],
      [0.999999, 0.045098, 10.42541],
      [3, 0.045098, 10.42541],
      [0.999999, 0.045098, 8.42541],
      [3, 0.045098, 8.42541],
      [-3, -7.978209, 10.42541],
      [-1, -7.978209, 10.42541],
      [-3, -7.978209, 8.42541],
      [-1, -7.978209, 8.42541],
      [-3, 0.021792, 10.42541],
      [-1, 0.021792, 10.42541],
      [-3, 0.021792, 8.42541],
      [-1, 0.021792, 8.42541],
      [-3, -8.001522, -2.57459],
      [-1, -8.001522, -2.57459],
      [-3, -8.001522, -4.57459],
      [-1, -8.001522, -4.57459],
      [-3, -0.001522, -2.57459],
      [-1, -0.001522, -2.57459],
      [-3, -0.001522, -4.57459],
      [-1, -0.001522, -4.57459],
      [0.999999, -7.944155, -2.57459],
      [3, -7.944155, -2.57459],
      [0.999999, -7.944155, -4.57459],
      [3, -7.944155, -4.57459],
      [0.999999, 0.055845, -2.57459],
      [3, 0.055845, -2.57459],
      [0.999999, 0.055845, -4.57459],
      [3, 0.055845, -4.57459],
      [-1.000001, 2.180847, -3.147023],
      [0.999999, 2.180847, -3.147023],
      [-1.000001, -2.407764, -9.700239],
      [0.999999, -2.407764, -9.700239],
      [-1.000001, 3.819152, -4.294175],
      [0.999999, 3.819152, -4.294175],
      [-1.000001, -0.769461, -10.847393],
      [0.999999, -0.769461, -10.847393],
      [0.999999, 5.984678, 11.42541],
      [3, 5.984678, 11.42541],
      [0.999999, 5.984677, 10.42541],
      [3, 5.984677, 10.42541],
      [0.999999, 7.984678, 11.42541],
      [3, 7.984678, 11.42541],
      [0.999999, 7.984677, 10.42541],
      [3, 7.984677, 10.42541],
      [-3, 6.053347, 11.42541],
      [-1, 6.053347, 11.42541],
      [-3, 6.053346, 10.42541],
      [-1, 6.053346, 10.42541],
      [-3, 8.053347, 11.425409],
      [-1, 8.053347, 11.425409],
      [-3, 8.053346, 10.425409],
      [-1, 8.053346, 10.425409],
      [-3, 0, 4.468455],
      [3, 0, 4.468455],
      [-3, 0, -4.531545],
      [3, 0, -4.531545],
      [-3, 6, 4.468455],
      [3, 6, 4.468455],
      [-3, 6, -4.531545],
      [3, 6, -4.531545],
      [-4, 0, 10.42541],
      [4, 0, 10.42541],
      [-4, 0, 4.42541],
      [4, 0, 4.42541],
      [-4, 7, 10.42541],
      [4, 7, 10.42541],
      [-4, 7, 4.425409],
      [4, 7, 4.425409],
      [-3, 0, 13.42541],
      [3, 0, 13.42541],
      [-3, 0, 9.42541],
      [3, 0, 9.42541],
      [-3, 6, 13.42541],
      [3, 6, 13.42541],
      [-3, 6, 9.42541],
      [3, 6, 9.42541],
    ],
    num_edge: 11,
    edge: [
      {
        num_face: 6,
        topology: [
          [0, 2, 3, 1],
          [4, 5, 7, 6],
          [0, 1, 5, 4],
          [1, 3, 7, 5],
          [3, 2, 6, 7],
          [2, 0, 4, 6],
        ],
      },
      {
        num_face: 6,
        topology: [
          [8, 10, 11, 9],
          [12, 13, 15, 14],
          [8, 9, 13, 12],
          [9, 11, 15, 13],
          [11, 10, 14, 15],
          [10, 8, 12, 14],
        ],
      },
      {
        num_face: 6,
        topology: [
          [16, 18, 19, 17],
          [20, 21, 23, 22],
          [16, 17, 21, 20],
          [17, 19, 23, 21],
          [19, 18, 22, 23],
          [18, 16, 20, 22],
        ],
      },
      {
        num_face: 6,
        topology: [
          [24, 26, 27, 25],
          [28, 29, 31, 30],
          [24, 25, 29, 28],
          [25, 27, 31, 29],
          [27, 26, 30, 31],
          [26, 24, 28, 30],
        ],
      },
      {
        num_face: 6,
        topology: [
          [32, 34, 35, 33],
          [36, 37, 39, 38],
          [32, 33, 37, 36],
          [33, 35, 39, 37],
          [35, 34, 38, 39],
          [34, 32, 36, 38],
        ],
      },
      {
        num_face: 6,
        topology: [
          [40, 42, 43, 41],
          [44, 45, 47, 46],
          [40, 41, 45, 44],
          [41, 43, 47, 45],
          [43, 42, 46, 47],
          [42, 40, 44, 46],
        ],
      },
      {
        num_face: 6,
        topology: [
          [48, 50, 51, 49],
          [52, 53, 55, 54],
          [48, 49, 53, 52],
          [49, 51, 55, 53],
          [51, 50, 54, 55],
          [50, 48, 52, 54],
        ],
      },
      {
        num_face: 6,
        topology: [
          [56, 58, 59, 57],
          [60, 61, 63, 62],
          [56, 57, 61, 60],
          [57, 59, 63, 61],
          [59, 58, 62, 63],
          [58, 56, 60, 62],
        ],
      },
      {
        num_face: 5,
        topology: [
          [64, 66, 67, 65],
          [68, 69, 71, 70],
          [65, 67, 71, 69],
          [67, 66, 70, 71],
          [66, 64, 68, 70],
        ],
      },
      {
        num_face: 6,
        topology: [
          [72, 74, 75, 73],
          [76, 77, 79, 78],
          [72, 73, 77, 76],
          [73, 75, 79, 77],
          [75, 74, 78, 79],
          [74, 72, 76, 78],
        ],
      },
      {
        num_face: 6,
        topology: [
          [80, 82, 83, 81],
          [84, 85, 87, 86],
          [80, 81, 85, 84],
          [81, 83, 87, 85],
          [83, 82, 86, 87],
          [82, 80, 84, 86],
        ],
      },
    ],
    vertices: {
      0: {
        joint_point: [0, 0, 0],
        sibling: null,
        child: 1,
        rotation_axis: 3,
        max_degree: 180,
        min_degree: 180,
        start_degree: 0,
        clockwise: 0,
      },
      1: {
        joint_point: [0, 0, 10],
        sibling: 2,
        child: null,
        rotation_axis: 0,
        max_degree: 45,
        min_degree: -45,
        start_degree: 0,
        clockwise: 0,
      },
      2: {
        joint_point: [0, 0, 10],
        sibling: 3,
        child: null,
        rotation_axis: 0,
        max_degree: 45,
        min_degree: -45,
        start_degree: 0,
        clockwise: 1,
      },
      3: {
        joint_point: [0, 0, -3],
        sibling: 4,
        child: null,
        rotation_axis: 0,
        max_degree: 45,
        min_degree: -45,
        start_degree: 0,
        clockwise: 0,
      },
      4: {
        joint_point: [0, 0, -3],
        sibling: 5,
        child: null,
        rotation_axis: 0,
        max_degree: 45,
        min_degree: -45,
        start_degree: 0,
        clockwise: 1,
      },
      5: {
        joint_point: [0, 0, 0],
        sibling: 6,
        child: null,
        rotation_axis: 2,
        max_degree: 15,
        min_degree: -15,
        start_degree: 0,
        clockwise: 0,
      },
      6: {
        joint_point: [0, 0, 0],
        sibling: 7,
        child: null,
        rotation_axis: 3,
        max_degree: 0,
        min_degree: 0,
        start_degree: 0,
        clockwise: 1,
      },
      7: {
        joint_point: [0, 0, 0],
        sibling: 8,
        child: null,
        rotation_axis: 3,
        max_degree: 0,
        min_degree: 0,
        start_degree: 0,
        clockwise: 0,
      },
      8: {
        joint_point: [0, 0, 0],
        sibling: 9,
        child: null,
        rotation_axis: 3,
        max_degree: 0,
        min_degree: 0,
        start_degree: 0,
        clockwise: 0,
      },
      9: {
        joint_point: [0, 0, 0],
        sibling: 10,
        child: null,
        rotation_axis: 3,
        max_degree: 0,
        min_degree: 0,
        start_degree: 0,
        clockwise: 0,
      },
      10: {
        joint_point: [0, 0, 0],
        sibling: null,
        child: null,
        rotation_axis: 3,
        max_degree: 0,
        min_degree: 0,
        start_degree: 0,
        clockwise: 0,
      },
    },
  };

  return wolf;
};

export { load, TempObj };
